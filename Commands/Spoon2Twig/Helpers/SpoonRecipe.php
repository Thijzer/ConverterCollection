<?php

namespace Commands\Spoon2Twig\Helpers;

use Converter\Converter;
use Converter\Strategy;
use FileManager\File;

class SpoonRecipe implements Strategy
{
    /** @var  Converter */
    private $converter;
    private $extension = 'html.twig';

    public function start(File $file, Converter $converter)
    {
        $this->converter = $converter;
        return $file->setContent($this->conversionSet($file->getContent()));
    }

    private function conversionSet($filedata)
    {
        $filedata = "{# This file is generated by the Spoon2Twig Converter #}\n\n".$filedata;

        // Exceptions
        $filedata = $this->pregReplaceSprintf('/:{\$(.*?)}/ism', ':%s', $filedata);

        // iterations
        $filedata = $this->pregReplaceIterations($filedata);

        // variables
        $filedata = $this->pregReplaceSprintf('/{\$(.*?)\)}/', '{{ %s ) }}', $filedata);
        $filedata = $this->pregReplaceSprintf('/{\$(.*?)}/ism', '{{ %s }}', $filedata);

        // filters
        $filedata = $this->pregReplaceSprintf('/\|date:(.*?)}/', '|spoondate(%s) }', $filedata, 'comma');
        $filedata = $this->pregReplaceSprintf('/\|date:(.*?)}/', '|date(%s) }', $filedata);
        $filedata = $this->pregReplaceSprintf('/\|substring:(.*?)}/', '|slice(%s) }', $filedata, 'comma');
        $filedata = $this->pregReplaceSprintf('/\|sprintf:(.*?)}/', '|format(%s)|raw }', $filedata);
        $filedata = $this->pregReplaceSprintf('/\|usersetting:(.*?)}/', '|usersetting(%s) }', $filedata);
        $filedata = $this->pregReplaceSprintf('/var\|geturlforblock:(.*?)}/', 'geturlforblock(%s) }', $filedata, 'comma');
        $filedata = $this->pregReplaceSprintf('/var\|getnavigation:(.*?)}/', 'getnavigation(%s)|raw }', $filedata, 'comma');
        $filedata = $this->pregReplaceSprintf('/var\|getsubnavigation:(.*?)}/', 'getsubnavigation(%s)|raw }', $filedata, 'comma');
        $filedata = str_replace('/\|getmainnavigation}/', '|getmainnavigation|raw }', $filedata);
        $filedata = $this->pregReplaceSprintf('/\|truncate:(.*?)}/', '|truncate(%s) }', $filedata);
        $filedata = $this->pregReplaceSprintf('/\|geturl:(.*?)}/', '|geturl(%s) }', $filedata, 'comma');
        $filedata = $this->pregReplaceSprintf('/\|geturl:(.*?)}/', '|geturl(%s) }', $filedata);
        $filedata = str_replace('/Grid}/', 'Grid|raw }', $filedata);

        // string replacers
        $filedata = str_replace('*}', '#}', $filedata); // comments
        $filedata = str_replace('{*', '{#', $filedata); // comments
        $filedata = str_replace('|ucfirst', '|capitalize', $filedata);
        $filedata = str_replace('.tpl', '.'.$this->extension, $filedata);

        // replace deprecated stuff for the positions
        $filedata = str_replace('BlockIsHTML', 'BlockIsEditor', $filedata);
        $filedata = str_replace('.blockContent', '.html|raw', $filedata);

        // raw converter
        $filedata = str_replace('siteHTMLHeader', 'siteHTMLHeader|raw', $filedata);
        $filedata = str_replace('siteHTMLFooter', 'siteHTMLFooter|raw', $filedata);
        $filedata = str_replace(' metaCustom ', ' metaCustom|raw ', $filedata);
        $filedata = str_replace(' meta ', ' meta|raw ', $filedata);
        $filedata = str_replace('blockContent', 'blockContent|raw', $filedata);

        // includes
        $filedata = $this->pregReplaceSprintf('/{include:(.*?)}/i', '{%% include "%s" %%}', $filedata); // for includes

        // operators
        $filedata = $this->pregReplaceSprintf('/{option:!(.*?)}/i', '{%% if not %s %%}', $filedata);
        $filedata = $this->pregReplaceSprintf('/{\/option:(.*?)}/i', '{%% endif %%}', $filedata); // for {option: variable }
        $filedata = $this->pregReplaceSprintf('/{option:(.*?)}/i', '{%% if %s %%}', $filedata);

        //form values values are lowercase
        $filedata = $this->pregReplaceSprintf('/{\/form:(.*?)}/i', '{%% endform %%}', $filedata); // for {form:add}
        $filedata = $this->pregReplaceSprintf('/{form:(.*?)}/i', '{%% form %s %%}', $filedata);
        $filedata = $this->pregReplaceSprintf('/{{ txt(.*?) }}/i', '{%% form_field %s %%}', $filedata, 'snakeCase');
        $filedata = $this->pregReplaceSprintf('/{{ file(.*?) }}/i', '{%% form_field %s %%}', $filedata, 'snakeCase');
        $filedata = $this->pregReplaceSprintf('/{{ ddm(.*?) }}/i', '{%% form_field %s %%}', $filedata, 'snakeCase');
        $filedata = $this->pregReplaceSprintf('/{{ chk(.*?) }}/i', '{%% form_field %s %%}', $filedata, 'snakeCase');
        $filedata = $this->pregReplaceSprintf('/form_field (.*?)_error/i', 'form_field_error %s', $filedata);

        // caching // disabled
        $filedata = $this->pregReplaceSprintf('/{\/cache:(.*?)}/i', '{# endcache #}', $filedata);
        $filedata = $this->pregReplaceSprintf('/{cache:(.*?)}/i', '{# cache(%s) #}', $filedata);

        // labels
        $filedata = $this->pregReplaceSprintf('/lbl(.*?)[!^|]/i', "'lbl.%s'|trans|", $filedata);
        $filedata = $this->pregReplaceSprintf('/act(.*?)[!^|]/i', "'act.%s'|trans|", $filedata);
        $filedata = $this->pregReplaceSprintf('/msg(.*?)[!^|]/i', "'msg.%s'|trans|", $filedata);
        $filedata = $this->pregReplaceSprintf('/err(.*?)[!^|]/i', "'err.%s'|trans|", $filedata);

        $filedata = $this->pregReplaceSprintf('/{{ lbl([\w]+) }}/i', "{{ 'lbl.%s'|trans }}", $filedata);
        $filedata = $this->pregReplaceSprintf('/{{ msg([\w]+) }}/i', "{{ 'msg.%s'|trans }}", $filedata);
        $filedata = $this->pregReplaceSprintf('/{{ err([\w]+) }}/i', "{{ 'err.%s'|trans }}", $filedata);
        $filedata = $this->pregReplaceSprintf('/{{ act([\w]+) }}/i', "{{ 'act.%s'|trans }}", $filedata);

        // tabs spaces
        $filedata = str_replace("\t", "    ", $filedata);
        $filedata = str_replace("    ", "  ", $filedata);

        return $filedata;
    }

    /**
     * Iteration Converter
     *
     * @param  string $filedata file to convert
     * @return string           file in converted form
     */
    private function pregReplaceIterations($filedata)
    {
        preg_match_all('/{iteration:(.*?)}(.*){\/iteration:(.*?)}/si', $filedata, $match);

        if ($match[1]) {
            foreach ($match[1] as $value) {
                $new_val = $this->converter->dePluralize($value);

                $prev_match = $match[0];
                $match[0] = str_replace('{iteration:'.$value.'}','{% for '. $new_val . ' in ' . $value . '_ %}', $match[0]);
                $match[0] = str_replace('{/iteration:'.$value.'}','{% endfor %}', $match[0]);
                $match[0] = str_replace($value, $new_val, $match[0]);
                $match[0] = str_replace($new_val.'_', $value, $match[0]);
                $filedata = str_replace($prev_match, $match[0], $filedata);
                return $this->pregReplaceIterations($filedata);
            }
        }
        return $filedata;
    }

    private function pregReplaceSprintf($regex, $format, $filedata, $extra = null)
    {
        return $this->converter->pregReplaceSprintf($regex, $format, $filedata, $extra);
    }
}
