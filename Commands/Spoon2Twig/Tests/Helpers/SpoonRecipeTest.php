<?php

namespace Commands\Spoon2Twig\Tests\Helpers;

use Commands\Spoon2Twig\Helpers\SpoonRecipe;
use Converter\Converter;
use Converter\Strategy;
use Event\Listener;
use FileManager\File;

class SpoonRecipeTest extends \PHPUnit_Framework_TestCase
{
    /** @var  Converter */
    private $converter;

    public function setUp()
    {
        $strategy = $this->prophesize(Strategy::class);
        $listener = $this->prophesize(Listener::class);

        $this->converter = new Converter($strategy->reveal(), $listener->reveal());
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /** @test */
    public function it_can_convert_following_spoon_template_file()
    {
        $file = new File('test.tpl', file_get_contents(__DIR__.'/spoon_file/test_file.tpl'));

        $spoonRecipe = new SpoonRecipe();
        $newFile = $spoonRecipe->start($file, $this->converter);

        $this->assertEquals(
            $newFile->getContent(),
            file_get_contents(__DIR__.'/twig_file/test_file.html.twig.test')
        );
    }

    /** @test */
    public function it_can_convert_following_spoon_recipe_functions()
    {
        $filedata = '{option:ddmTest}test{/option:ddmTest}';
        $filedata = $this->pregReplaceSprintf('/{option:!(.*?)}/i', '{%% if not %s %%}', $filedata);
        $filedata = $this->pregReplaceSprintf('/{\/option:(.*?)}/i', '{%% endif %%}', $filedata);
        $filedata = $this->pregReplaceSprintf('/{option:(.*?)}/i', '{%% if %s %%}', $filedata);

        $this->assertEquals(
            $filedata,
            '{% if ddmTest %}test{% endif %}'
        );
    }

    private function pregReplaceSprintf($regex, $format, $filedata, $extra = null)
    {
        return $this->converter->pregReplaceSprintf($regex, $format, $filedata, $extra);
    }
}
